#!/bin/bash
# script to sync /cvmfs/fermilab.opensciencegrid.org from /grid/fermiapp
# Written by Dave Dykstra 10/1/2014

TOP=/grid/fermiapp/cvmfsfermilab
PROJTOP=$TOP/publish

LOG=$TOP/logs/sync-cvmfs-fermilab.log
if touch $LOG.new 2>/dev/null; then
    rm -f $LOG.new
else
    # Need this separate check because bash does not complain when
    #  '>>' is done onto a read-only filesystem. 
    echo "Cannot write to $LOG" >&2
    exit 1
fi
exec 3>&2 >>$LOG 2>&1

# if project name includes "products/" sync only that subdirectory,
#   and if it doesn't, sync both top level and in products
#
# if it is "packages/" use "update_spack" tools to update it
PROJECTS="products/common products/artdaq ebd genie noble packages/common packages/external packages/larsoft"
REPO=fermilab.opensciencegrid.org

TRIGGERED=""
if [ "$1" != "-a" ]; then
    # note: this shares a trigger for products/common and packages/common
    # etc.  This is on purpose , so we sync ups new products into the spack
    # area.  It does make an extra rsync of products/common when new 
    # spack packags are added.
    for P in $PROJECTS; do
	BASEP=`basename $P`
	if [ -f $TOP/triggers/$BASEP/update ]; then
	    TRIGGERED="$TRIGGERED $P"
	fi
    done
    if [ -z "$TRIGGERED" ]; then
	# echo "Nothing to do at `date`"
	exit
    fi
    PROJECTS="`echo $TRIGGERED`"
fi

LOCKFILE=$TOP/triggers/cvmfsfermilab/synclock
TMPLOCK="$LOCKFILE.$$"
trap "rm -f $TMPLOCK" 0
# the 22nd field in /proc/<pid>/stat is a timestamp in jiffies since system boot
echo "$$ `awk '{print $22}' /proc/$$/stat`" >$TMPLOCK

if ! ln $TMPLOCK $LOCKFILE 2>/dev/null; then
    read OTHERPID OTHERSTART <$LOCKFILE
    if [ -z "$OTHERPID" ] || ! kill -0 "$OTHERPID" 2>/dev/null || \
	    [ "$OTHERSTART" != "`awk '{print $22}' /proc/$OTHERPID/stat`" ]; then
	rm -f $LOCKFILE
        if ! ln $TMPLOCK $LOCKFILE 2>/dev/null; then
            echo;echo "Attempted to break lock $LOCKFILE from $OTHERPID at `date` but failed, giving up"
            exit 1
        fi
        echo;echo "Broke lock $LOCKFILE from $OTHERPID at `date` because process was not running"
    else
	# for debugging -- normally don't want the noise every 5 minutes during
	#  a publish
	# echo;echo "Cannot create $LOCKFILE at `date`, already created by running process $OTHERPID"
        exit
    fi
fi
rm -f $TMPLOCK
trap "rm -f $LOCKFILE" 0

echo

# print these trigger messages after getting the lock to avoid duplicates
for T in $TRIGGERED; do
    BASEP=`basename $T`
    echo "Triggered $BASEP `cat $TOP/triggers/$BASEP/update`"
done

echo "Starting sync of $REPO for $PROJECTS at `date`"

RETS=0
for PROJECT in $PROJECTS; do 
    cvmfs_server transaction $REPO
    RET=$?
    if [ $RET != 0 ]; then
	echo "Error starting transaction for $PROJECT" >&2
	echo "Error starting transaction for $PROJECT" >&3
	let RETS+=$RET
	continue
    fi

    case "$PROJECT" in
    packages/*)
        SPACK_TOOLS=/grid/fermiapp/products/common/prd/spack_infrastructure/current/NULL
        PATH=$SPACK_TOOLS/bin:$PATH
        WORKFILE=$TOP/triggers/$BASEP/workfile
        update_spack $WORKFILE /cvmfs/$REPO/$PROJECT/spack/current/NULL
        update_ups_to_spack  /cvmfs/$REPO/$PROJECT/spack/current/NULL || true
    ;;

    *)
        DIRS="$PROJECT"
        if [ "${PROJECT#*/}" = "$PROJECT" ]; then
            DIRS="$DIRS products/$PROJECT"
        fi
        for DIR in $DIRS; do
            if [ ! -d $PROJTOP/$DIR/ ]; then
                continue
            fi
            echo;echo "rsyncing $PROJTOP/$DIR/ at `date`"
            cvmfs_rsync -av --stats --delete --exclude "/*/nightly/" --exclude "/*/nightly.version" $PROJTOP/$DIR/ /cvmfs/$REPO/$DIR/
            RET=$?
            if [ "$RET" != 0 ]; then
                break
            fi
        done

    ;;
    esac

    # remove trigger whether rsync succeeds or fails
    rm -f $TOP/triggers/`basename $PROJECT`/update
    if [ $RET != 0 ]; then
	# sleep a little while in case this was an interactive abort
	# this helps prevent umount errors during the abort
	sleep 1
	echo
	echo "Rsync of $PROJECT failed at `date`, aborting" >&2
	cvmfs_server abort -f $REPO
	echo "Error rsyncing $PROJECT" >&3
	let RETS+=$RET
	continue
    fi

    echo;echo "Publishing $PROJECT at `date`"
    cvmfs_server publish $REPO
    RET=$?
    if [ $RET != 0 ]; then
	echo
	echo "Publish of $PROJECT failed at `date`, aborting" >&2
	cvmfs_server abort -f $REPO
	echo "Error publishing $PROJECT" >&3
	let RETS+=$RET
	continue
    fi
 
done

echo;echo "Finished sync at `date` with exit code $RETS"
exit $RETS
